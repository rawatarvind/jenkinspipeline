pipeline {
    agent any
    tools{
        jdk "jdk17"
        nodejs "node16"
    }
    environment {
        SCANNER_HOME = tools 'sonar-scanner'
    }
    stages {
        stage('clean Workspace') {
            steps{
                cleanWs()
            }
        }
        stage('Cheout from Git') {
            steps{
                git branch: 'main', url:''
            }
        }
        stage('SonarQube Analysis') {
            steps{
                withSonarQubeEnv('Sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName= \
                    -Dsonar.projectKey=  '''
                }
            }
        }
        stage('quilty gate') {
            steps{
                script {
                    waitForQualityGate abortPipeline: flase, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Intall Dependencies') {
            steps{
                sh "npm install"
            }
        }
        stage('TRIVY FS SCAN') {
            steps{
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage('Docker Build & Push') {
            steps{
                script { 
                    withDockerRegistry(credentialsId:'docker',url: toolName:'docker') {
                        sh "docker build --build-arg TMDB_V3_API_KEY=<yourapikey> -t netfix ."
                        sh "docker tag netflix ashurawat123/netflix:latest"
                        sh "docker push ashurawat123/netflix:latest"
                    } 
                }
            }
        }
        stage ('TRIVY') {
            steps{
                sh "trivy image ashuarawat123/netflix:latest > trivy.txt"
            } 
        }
        stage ('Deoloy container') {
            steps{
                sh 'docker run -d --name netflix -p 8081:80 ashurawat123/netflix:latest'
            }
        }
    }
}